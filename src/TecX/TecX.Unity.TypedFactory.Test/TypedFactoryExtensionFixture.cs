using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Microsoft.Practices.Unity;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using TecX.TestTools;

namespace TecX.Unity.TypedFactory.Test
{
    public abstract class Given_ContainerWithTypedFactoryExtension : GivenWhenThen
    {
        protected IUnityContainer container;

        protected override void Given()
        {
            container = new UnityContainer();
            container.AddNewExtension<TypedFactoryExtension>();
        }
    }

    [TestClass]
    public class When_RegisteringFactory : Given_ContainerWithTypedFactoryExtension
    {
        protected override void When()
        {
            container.RegisterFactory<IMyFactory>();
        }

        [TestMethod]
        public void Then_ResolveReturnsAutoGeneratedProxy()
        {
            IMyFactory factory = container.Resolve<IMyFactory>();

            IFoo foo = factory.Create();
        }
    }

    public interface IMyFactory
    {
        IFoo Create();
    }

    public class Foo : IFoo
    {
        
    }

    public interface IFoo
    {
        
    }
}
