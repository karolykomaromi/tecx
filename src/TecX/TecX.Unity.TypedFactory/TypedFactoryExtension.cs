extern alias CC25;

namespace TecX.Unity.TypedFactory
{
    using System;
    using System.Reflection;

    using CC25.Castle.DynamicProxy;

    using Microsoft.Practices.Unity;

    using TecX.Common;

    public class TypedFactoryExtension : UnityContainerExtension, ITypedFactoryConfiguration
    {
        private ProxyGenerator generator;

        public void RegisterFactory<TFactory>(ITypedFactoryComponentSelector selector)
            where TFactory : class
        {
            Guard.AssertNotNull(selector, "selector");

            Type factoryType = typeof(TFactory);

            Guard.AssertCondition(
                factoryType.IsInterface,
                factoryType,
                "TFactory",
                "Cannot generate an implementation for a non-interface factory type.");

            this.AssertNoMethodHasOutParams(factoryType);

            Container.RegisterType<TFactory>(new InjectionFactory(container => GetAutoGeneratedFactory<TFactory>(container, selector)));
        }

        protected override void Initialize()
        {
            this.generator = new ProxyGenerator();
        }

        private void AssertNoMethodHasOutParams(Type factoryType)
        {
            var methods = factoryType.GetMethods(BindingFlags.Instance | BindingFlags.Public);

            foreach (var method in methods)
            {
                foreach (var parameter in method.GetParameters())
                {
                    if (parameter.IsOut)
                    {
                        throw new ArgumentException("Methods in factory interface must not have out parameters", "TFactory");
                    }
                }
            }
        }

        private TFactory GetAutoGeneratedFactory<TFactory>(
            IUnityContainer container,
            ITypedFactoryComponentSelector selector)
            where TFactory : class
        {
            return this.generator.CreateInterfaceProxyWithoutTarget<TFactory>(new FactoryInterceptor(container, selector));
        }
    }
}
