using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Castle.DynamicProxy;
using Microsoft.Practices.Unity;
using Microsoft.Practices.Unity.InterceptionExtension;

using TecX.Common;

namespace TecX.Unity.TypedFactory
{
    public class TypedFactoryExtension : UnityContainerExtension, ITypedFactoryConfiguration
    {
        private ProxyGenerator _generator;

        protected override void Initialize()
        {
            _generator = new ProxyGenerator();
        }

        public void RegisterFactory<TFactory>()
            where TFactory : class
        {
            Type factoryType = typeof(TFactory);

            Guard.AssertCondition(factoryType.IsInterface,
                factoryType,
                "TFactory",
                "Cannot generate an implementation for a non-interface factory type.");

            Container.RegisterType<TFactory>(new InjectionFactory(GetAutoGeneratedFactory<TFactory>));
        }

        private TFactory GetAutoGeneratedFactory<TFactory>(IUnityContainer container, Type type, string name)
            where TFactory : class
        {
            return _generator.CreateInterfaceProxyWithoutTarget<TFactory>(new FactoryInterceptor(container));
        }
    }
}
