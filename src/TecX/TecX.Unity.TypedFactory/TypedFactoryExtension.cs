using System;
using System.Reflection;

using Castle.DynamicProxy;

using Microsoft.Practices.Unity;

using TecX.Common;

namespace TecX.Unity.TypedFactory
{
    public class TypedFactoryExtension : UnityContainerExtension, ITypedFactoryConfiguration
    {
        private ProxyGenerator _generator;

        protected override void Initialize()
        {
            _generator = new ProxyGenerator();
        }

        public void RegisterFactory<TFactory>()
            where TFactory : class
        {
            RegisterFactory<TFactory>(new DefaultTypedFactoryComponentSelector());
        }

        public void RegisterFactory<TFactory>(ITypedFactoryComponentSelector selector)
            where TFactory : class
        {
            Guard.AssertNotNull(() => selector);

            Type factoryType = typeof(TFactory);

            Guard.AssertCondition(factoryType.IsInterface,
                factoryType,
                "TFactory",
                "Cannot generate an implementation for a non-interface factory type.");

            AssertNoMethodHasOutParams(factoryType);

            Container.RegisterType<TFactory>(new InjectionFactory(container => GetAutoGeneratedFactory<TFactory>(container, selector)));
        }

        private void AssertNoMethodHasOutParams(Type factoryType)
        {
            var methods = factoryType.GetMethods(BindingFlags.Instance | BindingFlags.Public);

            foreach (var method in methods)
            {
                foreach (var parameter in method.GetParameters())
                {
                    if (parameter.IsOut)
                    {
                        throw new ArgumentException("Methods in factory interface must not have out parameters", "TFactory");
                    }
                }
            }
        }

        private TFactory GetAutoGeneratedFactory<TFactory>(IUnityContainer container,
            ITypedFactoryComponentSelector selector)
            where TFactory : class
        {
            return _generator.CreateInterfaceProxyWithoutTarget<TFactory>(new FactoryInterceptor(container, selector));
        }
    }
}
