//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Designer.cs" #>
namespace Cars.CodeQuality.Test
{
    public static class KnownTestFiles
    {
<#
    string testFileDirectoryPath = this.Host.TemplateFile.Replace("KnownTestFiles.tt", string.Empty) + @"\TestFiles";
    DirectoryInfo testFileDirectory = new DirectoryInfo(testFileDirectoryPath);

    this.TakeStock(testFileDirectory, 2);

    Write(this.sb.ToString());
#>
    }
}
<#+
    private const string DefaultIndentation = "    ";

    private const string DefaultNamespace = "Cars\\";

    private readonly StringBuilder sb = new StringBuilder(100);

    public string UseThisForIndentation
    {
        get { return DefaultIndentation; }
    }

    public void TakeStock(DirectoryInfo directory, int indentLevel = 0)
    {
        if (directory != null)
        {
            string indentation = this.Indentation(indentLevel);

            this.sb.Append(indentation).Append("public static class ").AppendLine(directory.Name);
            this.sb.Append(indentation).AppendLine("{");

            FileInfo[] files = directory.GetFiles().OrderBy(f => f.Name).ToArray();

            for (int index = 0; index < files.Length; index++)
            {
                FileInfo file = files[index];

                this.WriteConstantForFile(file, indentLevel + 1);

                if (index < files.Length - 1)
                {
                    this.sb.AppendLine();
                }
            }

            DirectoryInfo[] subDirectories = directory.GetDirectories().OrderBy(d => d.Name).ToArray();

            if (files.Length > 0 && subDirectories.Length > 0)
            {
                this.sb.AppendLine();
            }

            for (int index = 0; index < subDirectories.Length; index++)
            {
                DirectoryInfo subDirectory = subDirectories[index];

                this.TakeStock(subDirectory, indentLevel + 1);

                if (index < subDirectories.Length - 1)
                {
                    this.sb.AppendLine();
                }
            }

            this.sb.Append(indentation).AppendLine("}");
        }
    }

    private static string ConvertFileNameToManifestResourceName(FileInfo file)
    {
        int idx = file.FullName.LastIndexOf(DefaultNamespace, StringComparison.Ordinal);

        string manifestResourceName = file.FullName.Substring(idx + DefaultNamespace.Length)
            .Replace(@"\", ".")
            .Replace("bin.Debug.", string.Empty)
            .Replace("bin.Release.", string.Empty);

        return manifestResourceName;
    }

    private string Indentation(int indentLevel)
    {
        return string.Concat(Enumerable.Repeat(this.UseThisForIndentation ?? DefaultIndentation, indentLevel));
    }

    private void WriteConstantForFile(FileInfo file, int indentLevel)
    {
        string indentation = this.Indentation(indentLevel);

        string manifestResourceName = ConvertFileNameToManifestResourceName(file);

        this.sb.Append(indentation).AppendLine(@"/// <summary>");
        this.sb.Append(indentation).Append(@"/// ").AppendLine(manifestResourceName);
        this.sb.Append(indentation).AppendLine(@"/// </summary>");

        this.sb.Append(indentation)
            .Append("public const string ")
            .Append(file.Name.Replace(file.Extension, string.Empty))
            .Append(" = \"")
            .Append(manifestResourceName)
            .AppendLine("\";");
    }
#>